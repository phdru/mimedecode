name: Run tests

on: [push, pull_request]

defaults:
  run:
    shell: bash -el {0}

jobs:
  run-tests:
    env:
      not_in_conda: "[]"

    strategy:
      matrix:
        python-version: ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "3.14", "=3.9[build=*_pypy]"]

    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    steps:

      # Setup Python/pip
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge, conda-forge/label/python_rc
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}
        if: ${{ runner.os == 'Linux' && !contains(fromJSON(env.not_in_conda), matrix.python-version) }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
        if: ${{ runner.os != 'Linux' || contains(fromJSON(env.not_in_conda), matrix.python-version) }}
      - name: Cache conda
        uses: actions/cache@v4
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda
      - name: Cache pip
        uses: actions/cache@v4
        with:
          # This path is specific to Linux/Unix
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip

      # Setup tox
      - name: Install dependencies
        run: |
          python --version
          python -m pip || python -m ensurepip --default-pip --upgrade
          python -m pip install --upgrade pip setuptools wheel
          pip --version
          pip install --upgrade virtualenv "tox >= 2.0, < 4"
      - name: Set TOXENV
        run: |
          python -c "
          import os, sys
          ld_library_path = None
          if hasattr(sys, 'pypy_version_info'):
              toxenv = 'pypy3'
          else:
              pyver = '%d%d' % tuple(sys.version_info[:2])
              if (pyver == '27') and (os.name == 'posix'):  # Python 2.7 on Linux requires `$LD_LIBRARY_PATH`
                  ld_library_path = os.path.join(
                      os.path.dirname(os.path.dirname(sys.executable)), 'lib')
              toxenv = 'py%s' % pyver
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              if ld_library_path:
                  f.write('LD_LIBRARY_PATH=' + ld_library_path + '\n')
              f.write('TOXENV=' + toxenv + '\n')
          "

      - name: Run tox
        run: |
          python -c "import os; print(os.environ['TOXENV'])"
          tox --version
          tox
